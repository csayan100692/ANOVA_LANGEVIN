library(PBTVMF)
library(PBTVMF)
# 'creates test statistic value and critical value
#' @export
#' @param x data matrix
#' @param alpha numeric variable
####################################################
PBTVMF3=function(x,alpha)
{
p=3
k=3
sequence_of_n=c(nrow(x[[1]]),nrow(x[[2]]),nrow(x[[3]]))
H=1000
y=vector(mode = "list", length = k)
k_hat_0=vector(mode = "list", length = k)
k_hat_hat_0=vector(mode = "list", length = k)
g=vector(mode = "list", length = k)
z=vector(mode = "list", length = k)
r_bar=array(0,k)
g_bar=array(0,k)
a=array(0,k)
b=array(0,k)
inner_loop_statistic_value_array=array(0,H)
####################################################################
for(i in 1:k)
{
y[[i]]=c(sum(x[[i]][,1]),sum(x[[i]][,2]))
r_bar[i]=sqrt(sum(y[[i]]**2))/sequence_of_n[i]
k_hat_0[[i]]=y[[i]]/sqrt(sum(y[[i]]**2))
a[i]=r_bar[i]*(p-r_bar[i]^2)/(1-r_bar[i]^2)
}
y=(y[[1]]+y[[2]]+y[[3]])
mu_hat=y/sqrt(sum(y**2))
N=sum(sequence_of_n)
A1=a[1]*sqrt(sum(y[[1]]**2))+a[2]*sqrt(sum(y[[2]]**2))+a[3]*sqrt(sum(y[[3]]**2))
A2=a[1]*y[[1]]+a[2]*y[[2]]+a[3]*y[[3]]
A3=sqrt(sum(A2**2))
statistic_value_array=2*(A1-A3)
for(h in 1:H)
{
for(i in 1:k)
{
g[[i]] <- rmovMF(sequence_of_n[i],a[i]*k_hat_0[[1]]/sqrt(sum(k_hat_0[[1]]**2)))
z[[i]]=c(sum(g[[i]][,1]),sum(g[[i]][,2]))
g_bar[i]=sqrt(sum(z[[i]]**2))/sequence_of_n[i]
k_hat_hat_0[[i]]=z[[i]]/sqrt(sum(z[[i]]**2))
b[i]=g_bar[i]*(p-g_bar[i]^2)/(1-g_bar[i]^2)
}
z=(z1+z2+z3)
mu_hat1=z/sqrt(sum(z**2))
B1=b[1]*sqrt(sum(z[[1]]**2))+b[2]*sqrt(sum(z[[2]]**2))+b[3]*sqrt(sum(z[[3]]**2))
B2=b[1]*z[[1]]+b[2]*z[[2]]+b[3]*z[[3]]
B3=sqrt(sum(B2**2))
inner_loop_statistic_value_array[h]=2*(B1-B3)
}
q<-sort(inner_loop_statistic_value_array,decreasing = FALSE) # sorting of inner bootstrap values
critical_value<-q[(1-alpha)*H]
return(list(statistic_value,critical_value))
}
library(PBTVMF)
library(movMF)
x1=rmovMF(10,2*c(1,-1)/sqrt(2))
x2=rmovMF(20,3*c(1,-1)/sqrt(2))
x3=rmovMF(30,4*c(1,-1)/sqrt(2))
x=list(x1,x2,x3)
PBTVMF3(x,0.05)
y
PBTVMF3(x,0.05)
# 'creates test statistic value and critical value
#' @export
#' @param x data matrix
#' @param alpha numeric variable
####################################################
#PBTVMF3=function(x,alpha)
#{
p=3
k=3
x1=rmovMF(10,2*c(1,-1)/sqrt(2))
x2=rmovMF(20,3*c(1,-1)/sqrt(2))
x3=rmovMF(30,4*c(1,-1)/sqrt(2))
x=list(x1,x2,x3)
alpha=0.05
sequence_of_n=c(nrow(x[[1]]),nrow(x[[2]]),nrow(x[[3]]))
H=1000
y=vector(mode = "list", length = k)
k_hat_0=vector(mode = "list", length = k)
k_hat_hat_0=vector(mode = "list", length = k)
g=vector(mode = "list", length = k)
z=vector(mode = "list", length = k)
r_bar=array(0,k)
g_bar=array(0,k)
a=array(0,k)
b=array(0,k)
inner_loop_statistic_value_array=array(0,H)
####################################################################
for(i in 1:k)
{
y[[i]]=c(sum(x[[i]][,1]),sum(x[[i]][,2]))
r_bar[i]=sqrt(sum(y[[i]]**2))/sequence_of_n[i]
k_hat_0[[i]]=y[[i]]/sqrt(sum(y[[i]]**2))
a[i]=r_bar[i]*(p-r_bar[i]^2)/(1-r_bar[i]^2)
}
y=(y[[1]]+y[[2]]+y[[3]])
mu_hat=y/sqrt(sum(y**2))
N=sum(sequence_of_n)
A1=a[1]*sqrt(sum(y[[1]]**2))+a[2]*sqrt(sum(y[[2]]**2))+a[3]*sqrt(sum(y[[3]]**2))
A2=a[1]*y[[1]]+a[2]*y[[2]]+a[3]*y[[3]]
A3=sqrt(sum(A2**2))
statistic_value_array=2*(A1-A3)
for(h in 1:H)
{
for(i in 1:k)
{
g[[i]] <- rmovMF(sequence_of_n[i],a[i]*k_hat_0[[1]]/sqrt(sum(k_hat_0[[1]]**2)))
z[[i]]=c(sum(g[[i]][,1]),sum(g[[i]][,2]))
g_bar[i]=sqrt(sum(z[[i]]**2))/sequence_of_n[i]
k_hat_hat_0[[i]]=z[[i]]/sqrt(sum(z[[i]]**2))
b[i]=g_bar[i]*(p-g_bar[i]^2)/(1-g_bar[i]^2)
}
z=(z1+z2+z3)
mu_hat1=z/sqrt(sum(z**2))
B1=b[1]*sqrt(sum(z[[1]]**2))+b[2]*sqrt(sum(z[[2]]**2))+b[3]*sqrt(sum(z[[3]]**2))
B2=b[1]*z[[1]]+b[2]*z[[2]]+b[3]*z[[3]]
B3=sqrt(sum(B2**2))
inner_loop_statistic_value_array[h]=2*(B1-B3)
}
q<-sort(inner_loop_statistic_value_array,decreasing = FALSE) # sorting of inner bootstrap values
critical_value<-q[(1-alpha)*H]
#   return(list(statistic_value,critical_value))
# }
# 'creates test statistic value and critical value
#' @export
#' @param x data matrix
#' @param alpha numeric variable
####################################################
#PBTVMF3=function(x,alpha)
#{
p=3
k=3
x1=rmovMF(10,2*c(1,-1)/sqrt(2))
x2=rmovMF(20,3*c(1,-1)/sqrt(2))
x3=rmovMF(30,4*c(1,-1)/sqrt(2))
x=list(x1,x2,x3)
alpha=0.05
sequence_of_n=c(nrow(x[[1]]),nrow(x[[2]]),nrow(x[[3]]))
H=1000
y=vector(mode = "list", length = k)
k_hat_0=vector(mode = "list", length = k)
k_hat_hat_0=vector(mode = "list", length = k)
g=vector(mode = "list", length = k)
z=vector(mode = "list", length = k)
r_bar=array(0,k)
g_bar=array(0,k)
a=array(0,k)
b=array(0,k)
inner_loop_statistic_value_array=array(0,H)
####################################################################
for(i in 1:k)
{
y[[i]]=c(sum(x[[i]][,1]),sum(x[[i]][,2]))
r_bar[i]=sqrt(sum(y[[i]]**2))/sequence_of_n[i]
k_hat_0[[i]]=y[[i]]/sqrt(sum(y[[i]]**2))
a[i]=r_bar[i]*(p-r_bar[i]^2)/(1-r_bar[i]^2)
}
y=(y[[1]]+y[[2]]+y[[3]])
mu_hat=y/sqrt(sum(y**2))
N=sum(sequence_of_n)
A1=a[1]*sqrt(sum(y[[1]]**2))+a[2]*sqrt(sum(y[[2]]**2))+a[3]*sqrt(sum(y[[3]]**2))
A2=a[1]*y[[1]]+a[2]*y[[2]]+a[3]*y[[3]]
A3=sqrt(sum(A2**2))
statistic_value_array=2*(A1-A3)
for(h in 1:H)
{
for(i in 1:k)
{
g[[i]] <- rmovMF(sequence_of_n[i],a[i]*k_hat_0[[1]]/sqrt(sum(k_hat_0[[1]]**2)))
z[[i]]=c(sum(g[[i]][,1]),sum(g[[i]][,2]))
g_bar[i]=sqrt(sum(z[[i]]**2))/sequence_of_n[i]
k_hat_hat_0[[i]]=z[[i]]/sqrt(sum(z[[i]]**2))
b[i]=g_bar[i]*(p-g_bar[i]^2)/(1-g_bar[i]^2)
}
z=(z[[1]]+z[[2]]+z[[3]])
mu_hat1=z/sqrt(sum(z**2))
B1=b[1]*sqrt(sum(z[[1]]**2))+b[2]*sqrt(sum(z[[2]]**2))+b[3]*sqrt(sum(z[[3]]**2))
B2=b[1]*z[[1]]+b[2]*z[[2]]+b[3]*z[[3]]
B3=sqrt(sum(B2**2))
inner_loop_statistic_value_array[h]=2*(B1-B3)
}
q<-sort(inner_loop_statistic_value_array,decreasing = FALSE) # sorting of inner bootstrap values
critical_value<-q[(1-alpha)*H]
#   return(list(statistic_value,critical_value))
# }
z
y
x
x[[1]]
y
y[[1]]
x[[1]]
x[[2]]
x[[3]]
x
sequence_of_n
r_bar
y
k_hat_0
a
# 'creates test statistic value and critical value
#' @export
#' @param x data matrix
#' @param alpha numeric variable
####################################################
PBTVMF3=function(x,alpha)
{
p=3
k=3
# x1=rmovMF(10,2*c(1,-1)/sqrt(2))
# x2=rmovMF(20,3*c(1,-1)/sqrt(2))
# x3=rmovMF(30,4*c(1,-1)/sqrt(2))
# x=list(x1,x2,x3)
# alpha=0.05
sequence_of_n=c(nrow(x[[1]]),nrow(x[[2]]),nrow(x[[3]]))
H=1000
y=vector(mode = "list", length = k)
k_hat_0=vector(mode = "list", length = k)
k_hat_hat_0=vector(mode = "list", length = k)
g=vector(mode = "list", length = k)
z=vector(mode = "list", length = k)
r_bar=array(0,k)
g_bar=array(0,k)
a=array(0,k)
b=array(0,k)
inner_loop_statistic_value_array=array(0,H)
####################################################################
for(i in 1:k)
{
y[[i]]=c(sum(x[[i]][,1]),sum(x[[i]][,2]))
r_bar[i]=sqrt(sum(y[[i]]**2))/sequence_of_n[i]
k_hat_0[[i]]=y[[i]]/sqrt(sum(y[[i]]**2))
a[i]=r_bar[i]*(p-r_bar[i]^2)/(1-r_bar[i]^2)
}
y1=(y[[1]]+y[[2]]+y[[3]])
mu_hat=y1/sqrt(sum(y1**2))
N=sum(sequence_of_n)
A1=a[1]*sqrt(sum(y[[1]]**2))+a[2]*sqrt(sum(y[[2]]**2))+a[3]*sqrt(sum(y[[3]]**2))
A2=a[1]*y[[1]]+a[2]*y[[2]]+a[3]*y[[3]]
A3=sqrt(sum(A2**2))
statistic_value_array=2*(A1-A3)
for(h in 1:H)
{
for(i in 1:k)
{
g[[i]] <- rmovMF(sequence_of_n[i],a[i]*k_hat_0[[1]]/sqrt(sum(k_hat_0[[1]]**2)))
z[[i]]=c(sum(g[[i]][,1]),sum(g[[i]][,2]))
g_bar[i]=sqrt(sum(z[[i]]**2))/sequence_of_n[i]
k_hat_hat_0[[i]]=z[[i]]/sqrt(sum(z[[i]]**2))
b[i]=g_bar[i]*(p-g_bar[i]^2)/(1-g_bar[i]^2)
}
z1=(z[[1]]+z[[2]]+z[[3]])
mu_hat1=z1/sqrt(sum(z1**2))
B1=b[1]*sqrt(sum(z[[1]]**2))+b[2]*sqrt(sum(z[[2]]**2))+b[3]*sqrt(sum(z[[3]]**2))
B2=b[1]*z[[1]]+b[2]*z[[2]]+b[3]*z[[3]]
B3=sqrt(sum(B2**2))
inner_loop_statistic_value_array[h]=2*(B1-B3)
}
q<-sort(inner_loop_statistic_value_array,decreasing = FALSE) # sorting of inner bootstrap values
critical_value<-q[(1-alpha)*H]
return(list(statistic_value,critical_value))
}
PBTVMF3(x,0.05)
# 'creates test statistic value and critical value
#' @export
#' @param x data matrix
#' @param alpha numeric variable
####################################################
PBTVMF3=function(x,alpha)
{
p=3
k=3
# x1=rmovMF(10,2*c(1,-1)/sqrt(2))
# x2=rmovMF(20,3*c(1,-1)/sqrt(2))
# x3=rmovMF(30,4*c(1,-1)/sqrt(2))
# x=list(x1,x2,x3)
# alpha=0.05
sequence_of_n=c(nrow(x[[1]]),nrow(x[[2]]),nrow(x[[3]]))
H=1000
y=vector(mode = "list", length = k)
k_hat_0=vector(mode = "list", length = k)
k_hat_hat_0=vector(mode = "list", length = k)
g=vector(mode = "list", length = k)
z=vector(mode = "list", length = k)
r_bar=array(0,k)
g_bar=array(0,k)
a=array(0,k)
b=array(0,k)
inner_loop_statistic_value_array=array(0,H)
####################################################################
for(i in 1:k)
{
y[[i]]=c(sum(x[[i]][,1]),sum(x[[i]][,2]))
r_bar[i]=sqrt(sum(y[[i]]**2))/sequence_of_n[i]
k_hat_0[[i]]=y[[i]]/sqrt(sum(y[[i]]**2))
a[i]=r_bar[i]*(p-r_bar[i]^2)/(1-r_bar[i]^2)
}
y1=(y[[1]]+y[[2]]+y[[3]])
mu_hat=y1/sqrt(sum(y1**2))
N=sum(sequence_of_n)
A1=a[1]*sqrt(sum(y[[1]]**2))+a[2]*sqrt(sum(y[[2]]**2))+a[3]*sqrt(sum(y[[3]]**2))
A2=a[1]*y[[1]]+a[2]*y[[2]]+a[3]*y[[3]]
A3=sqrt(sum(A2**2))
statistic_value=2*(A1-A3)
for(h in 1:H)
{
for(i in 1:k)
{
g[[i]] <- rmovMF(sequence_of_n[i],a[i]*k_hat_0[[1]]/sqrt(sum(k_hat_0[[1]]**2)))
z[[i]]=c(sum(g[[i]][,1]),sum(g[[i]][,2]))
g_bar[i]=sqrt(sum(z[[i]]**2))/sequence_of_n[i]
k_hat_hat_0[[i]]=z[[i]]/sqrt(sum(z[[i]]**2))
b[i]=g_bar[i]*(p-g_bar[i]^2)/(1-g_bar[i]^2)
}
z1=(z[[1]]+z[[2]]+z[[3]])
mu_hat1=z1/sqrt(sum(z1**2))
B1=b[1]*sqrt(sum(z[[1]]**2))+b[2]*sqrt(sum(z[[2]]**2))+b[3]*sqrt(sum(z[[3]]**2))
B2=b[1]*z[[1]]+b[2]*z[[2]]+b[3]*z[[3]]
B3=sqrt(sum(B2**2))
inner_loop_statistic_value_array[h]=2*(B1-B3)
}
q<-sort(inner_loop_statistic_value_array,decreasing = FALSE) # sorting of inner bootstrap values
critical_value<-q[(1-alpha)*H]
return(list(statistic_value,critical_value))
}
PBTVMF3(x,0.05)
# 'creates test statistic value and critical value
#' @export
#' @param x data matrix
#' @param alpha numeric variable
####################################################
PBTVMF3=function(x,alpha)
{
p=3
k=3
# x1=rmovMF(10,2*c(1,-1)/sqrt(2))
# x2=rmovMF(20,3*c(1,-1)/sqrt(2))
# x3=rmovMF(30,4*c(1,-1)/sqrt(2))
# x=list(x1,x2,x3)
# alpha=0.05
sequence_of_n=c(nrow(x[[1]]),nrow(x[[2]]),nrow(x[[3]]))
H=1000
y=vector(mode = "list", length = k)
k_hat_0=vector(mode = "list", length = k)
k_hat_hat_0=vector(mode = "list", length = k)
g=vector(mode = "list", length = k)
z=vector(mode = "list", length = k)
r_bar=array(0,k)
g_bar=array(0,k)
a=array(0,k)
b=array(0,k)
inner_loop_statistic_value_array=array(0,H)
####################################################################
for(i in 1:k)
{
y[[i]]=c(sum(x[[i]][,1]),sum(x[[i]][,2]))
r_bar[i]=sqrt(sum(y[[i]]**2))/sequence_of_n[i]
k_hat_0[[i]]=y[[i]]/sqrt(sum(y[[i]]**2))
a[i]=r_bar[i]*(p-r_bar[i]^2)/(1-r_bar[i]^2)
}
y1=(y[[1]]+y[[2]]+y[[3]])
mu_hat=y1/sqrt(sum(y1**2))
N=sum(sequence_of_n)
A1=a[1]*sqrt(sum(y[[1]]**2))+a[2]*sqrt(sum(y[[2]]**2))+a[3]*sqrt(sum(y[[3]]**2))
A2=a[1]*y[[1]]+a[2]*y[[2]]+a[3]*y[[3]]
A3=sqrt(sum(A2**2))
statistic_value=2*(A1-A3)
for(h in 1:H)
{
for(i in 1:k)
{
g[[i]] <- rmovMF(sequence_of_n[i],a[i]*k_hat_0[[1]]/sqrt(sum(k_hat_0[[1]]**2)))
z[[i]]=c(sum(g[[i]][,1]),sum(g[[i]][,2]))
g_bar[i]=sqrt(sum(z[[i]]**2))/sequence_of_n[i]
k_hat_hat_0[[i]]=z[[i]]/sqrt(sum(z[[i]]**2))
b[i]=g_bar[i]*(p-g_bar[i]^2)/(1-g_bar[i]^2)
}
z1=(z[[1]]+z[[2]]+z[[3]])
mu_hat1=z1/sqrt(sum(z1**2))
B1=b[1]*sqrt(sum(z[[1]]**2))+b[2]*sqrt(sum(z[[2]]**2))+b[3]*sqrt(sum(z[[3]]**2))
B2=b[1]*z[[1]]+b[2]*z[[2]]+b[3]*z[[3]]
B3=sqrt(sum(B2**2))
inner_loop_statistic_value_array[h]=2*(B1-B3)
}
#q<-sort(inner_loop_statistic_value_array,decreasing = FALSE) # sorting of inner bootstrap values
critical_value<-quantile(inner_loop_statistic_value_array,1-alpha)
return(list(statistic_value,critical_value))
}
PBTVMF3(x,0.05)
library(PBTVMF)
library(PBTVMF)
x1=rmovMF(10,2*c(1,-1)/sqrt(2))
x2=rmovMF(20,3*c(1,-1)/sqrt(2))
x3=rmovMF(30,4*c(1,-1)/sqrt(2))
x4=rmovMF(40,5*c(1,-1)/sqrt(2))
x=list(x1,x2,x3,x4)
PBTVMF4(x,0.05)
library(PBTVMF)
x5=rmovMF(50,6*c(1,-1)/sqrt(2))
x=list(x1,x2,x3,x4,x5)
PBTVMF5(x,0.05)
library(PBTVMF)
library(PBTVMF)
library(PBTVMF)
